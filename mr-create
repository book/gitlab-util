#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;

# tiny utility
sub shellquote {
    my $arg = shift;
    return $arg =~ /\A\w+\z/ ? $arg : qq{'${\($arg=~s/'/'"'"'/gr)}'};
}

my %argument;
my %option = (
    'project=s' => sub {
        ( split /:/, `git config remote.origin.url` )[1] =~ s/\.git$//r;
    },
    'remove_source_branch|remove-source-branch!' => 1,
    'source_branch|source-branch=s' => sub { `git branch --show-current` },
    'target_branch|target-branch=s' => sub {
        my @parts = split m'/', `git symbolic-ref refs/remotes/origin/HEAD`;
        chomp( my $target = join '/', @parts[ 3 .. $#parts ] );
        $target;
    },
    'title=s' => sub {
        chomp( my $base =
              `git merge-base origin/$argument{target_branch} HEAD` );
        chomp( my @subjects = `git log --pretty=format:%s $base..` );
        shift @subjects;    # most recent commit?
    },
);

# since we sort options by name,
# `target_branch` is computed just in time for `title`
for my $option ( sort keys %option ) {
    my ($argument) = split /[|=!]/, $option;
    $argument{$argument} =
      ref $option{$option} eq 'CODE'
      ? $option{$option}->()
      : $option{$option};
    die "Failed to compute default $argument\n" if $?;
}
chomp for values %argument;

GetOptions( \%argument, sort keys %option ) or die "\n";    # TODO USAGE

# Build the command-line
require GitLab::API::v4;
my @cmd = qw( gitlab-api-v4 create_merge_request );
push @cmd, delete $argument{project},    # required
  map {                                  # all other options
    $GitLab::API::v4::VERSION >= 0.15
      ? join( ':', $_,     shellquote( $argument{$_} ) )    # param:value
      : join( '=', "--$_", shellquote( $argument{$_} ) )    # --param=value
  }
  grep $argument{$_},
  sort keys %argument;

print "@cmd\n";
